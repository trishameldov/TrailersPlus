/************************/
/*         Mixin        */
/************************/

// BOOTSTRAP
// Ascending
// Used to evaluate Sass maps like our grid breakpoints.
@mixin _assert-ascending($map, $map-name) {
	$prev-key: null;
	$prev-num: null;
	@each $key, $num in $map {
		@if $prev-num == null or unit($num) == '%' {
			// Do nothing
		} @else if not comparable($prev-num, $num) {
			@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		} @else if $prev-num >= $num {
			@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
		}
		$prev-key: $key;
		$prev-num: $num;
	}
}

// Starts at zero
// Another grid mixin that ensures the min-width of the lowest breakpoint starts at 0.
@mixin _assert-starts-at-zero($map) {
	$values: map-values($map);
	$first-value: nth($values, 1);
	@if $first-value != 0 {
		@warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
	}
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);

	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

	@if ($yiq >= $yiq-contrasted-threshold) {
		@return $dark;
	} @else {
		@return $light;
	}
}

// Retrieve color Sass maps
@function color($key: 'blue') {
	@return map-get($colors, $key);
}

@function theme-color($key: 'primary') {
	@return map-get($theme-colors, $key);
}

@function gray($key: '100') {
	@return map-get($grays, $key);
}

// Request a theme color level
@function theme-color-level($color-name: 'primary', $level: 0) {
	$color: theme-color($color-name);
	$color-base: if($level > 0, $black, $white);
	$level: abs($level);

	@return mix($color-base, $color, $level * $theme-color-interval);
}

/*		OWN		*/

@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin flex-center-vert {
	display: flex;
	align-items: center;
}

@mixin flex-center-hor {
	display: flex;
	justify-content: center;
}

@mixin flex-width($value: 100%) {
	flex-basis: $value;
	flex-basis: $value;
	width: $value;
}

@mixin vertical-separator($left: 0, $right: auto, $bg: var(--c-white), $opacity: 0.15) {
	content: '';
	display: block;
	position: absolute;
	top: 0;
	left: $left;
	right: $right;
	height: 100%;
	width: 1px;
	background-color: $bg;
	opacity: $opacity;
	transform: rotate(7deg);
	outline: 1px solid transparent;
}

@mixin shadow($color: var(--ca-black), $opacity: 0.5) {
	box-shadow: 0 5px 44px rgba($color, $opacity);
}

@mixin skew($color: $color-alter) {
	content: '';
	position: absolute;
	width: 100%;
	height: 100%;
	left: 0;
	top: 0;
	background-color: $color;
	z-index: -1;
	transform: skewX(-6deg);
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
	-webkit-background-clip: content-box;
	background-clip: content-box;
	outline: 1px solid transparent;
}

@mixin scrollBar($color1: var(--ca-black), $color2: var(--ca-pomegranate)) {
	&::-webkit-scrollbar {
		width: 10px;
	}

	/* Track */
	&::-webkit-scrollbar-track {
		-webkit-box-shadow: inset 0 0 6px rgba($color1, 0.3);
		box-shadow: inset 0 0 6px rgba($color1, 0.3);
		-webkit-border-radius: 10px;
		border-radius: 10px;
	}

	/* Handle */
	&::-webkit-scrollbar-thumb {
		-webkit-border-radius: 10px;
		border-radius: 10px;
		background: rgba($color2, 0.8);
		-webkit-box-shadow: inset 0 0 6px rgba($color1, 0.5);
		box-shadow: inset 0 0 6px rgba($color1, 0.5);
	}
	&::-webkit-scrollbar-thumb:window-inactive {
		background: rgba($color2, 0.4);
	}
}

@mixin bgImage {
	position: absolute;
	left: 0;
	top: 0;
	height: 100%;
	object-fit: cover;
	object-position: center;
	z-index: -1;
}

@mixin bgImage-fill {
	position: absolute;
	left: 0;
	top: 0;
	height: 100%;
	object-fit: fill;
	object-position: center;
	z-index: -1;
}

@mixin fontAwesome {
	font-family: 'FontAwesome';
	text-rendering: auto;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin ionIcons {
    font-family: 'Ionicons';
    font-style: normal;
    font-variant: normal;
    text-rendering: auto;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
}

@mixin clearfix() {
	&:after {
	  display: block;
	  clear: both;
	  content: "";
	}
  }
  