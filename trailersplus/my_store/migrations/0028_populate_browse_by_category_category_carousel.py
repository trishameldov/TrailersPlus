# Generated by Django 3.0.11 on 2022-09-05 20:49
from django.db import migrations

def copy_page_data_to_all_other_locations(apps, schema_editor):
    MyStore = apps.get_model("my_store", "MyStore")
    nampa = MyStore.objects.get(slug="Nampa")
    block_to_copy = nampa.content.get_prep_value()[3]
    block_to_copy_en = nampa.content_en.get_prep_value()[3]
    block_to_copy_es = nampa.content_es.get_prep_value()[3]
    for page in MyStore.objects.all().exclude(slug='Nampa'):
        # Create a blank list for the revised StreamField
            page_data = process_stream_data(page.content.stream_data, block_to_copy)
            page_data_en = process_stream_data(page.content_en.stream_data, block_to_copy_en)
            page_data_es = process_stream_data(page.content_es.stream_data, block_to_copy_es)
            page.content.stream_data = page_data
            page.content_en.stream_data = page_data_en
            page.content_es.stream_data = page_data_es
            page.save()


def delete_page_data_to_all_other_locations(apps, schema_editor):
    MyStore = apps.get_model("my_store", "MyStore")
    for page in MyStore.objects.all().exclude(slug='Nampa'):
        # Create a blank list for the revised StreamField
            page_data = delete_process_stream_data(page.content.stream_data)
            page_data_en = delete_process_stream_data(page.content_en.stream_data)
            page_data_es = delete_process_stream_data(page.content_es.stream_data)
            page.content.stream_data = page_data
            page.content_en.stream_data = page_data_en
            page.content_es.stream_data = page_data_es
            page.save()


def delete_process_stream_data(page_data):
    try:
        index_to_delete = [x['type'] for x in page_data].index('products')
    except ValueError:
        index_to_delete = None
    if index_to_delete is not None and [x['type'] for x in page_data].count('products') > 1:
        del page_data[index_to_delete]
    return page_data

def process_stream_data(page_data, block_to_copy):
    for index, element in enumerate(page_data):
        if element["type"] == "trust_pilot_reviews_horizontal":
            page_data.insert(index + 1, block_to_copy)
    return page_data


class Migration(migrations.Migration):

    dependencies = [
        ('my_store', '0028_auto_20220901_1207'),
    ]

    operations = [
        migrations.RunPython(
            copy_page_data_to_all_other_locations,
            delete_page_data_to_all_other_locations
        ),
    ]
