# Generated by Django 3.0.8 on 2020-07-29 11:08

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import product.models.django
import streams.blocks
from streams.splitted_blocks.commerce_blocks import detail_page_blocks as dpb, inventory_blocks as ib
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0045_assign_unlock_grouppagepermission"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("web_category", models.CharField(max_length=25)),
                ("base_type", models.CharField(max_length=255)),
                (
                    "primary",
                    models.BooleanField(default=False, verbose_name="Is primary?"),
                ),
                ("slug", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=25),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={"verbose_name": "Category", "verbose_name_plural": "Categories",},
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "store_id",
                    models.CharField(max_length=10, primary_key=True, serialize=False),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("AL", "Alabama"),
                            ("AK", "Alaska"),
                            ("AZ", "Arizona"),
                            ("AR", "Arkansas"),
                            ("CA", "California"),
                            ("CO", "Colorado"),
                            ("CT", "Connecticut"),
                            ("DE", "Delaware"),
                            ("FL", "Florida"),
                            ("GA", "Georgia"),
                            ("HI", "Hawaii"),
                            ("ID", "Idaho"),
                            ("IL", "Illinois"),
                            ("IN", "Indiana"),
                            ("IA", "Iowa"),
                            ("KS", "Kansas"),
                            ("KY", "Kentucky"),
                            ("LA", "Louisiana"),
                            ("ME", "Maine"),
                            ("MD", "Maryland"),
                            ("MA", "Massachusetts"),
                            ("MI", "Michigan"),
                            ("MN", "Minnesota"),
                            ("MS", "Mississippi"),
                            ("MO", "Missouri"),
                            ("MT", "Montana"),
                            ("NE", "Nebraska"),
                            ("NV", "Nevada"),
                            ("NH", "New Hampshire"),
                            ("NJ", "New Jersey"),
                            ("NM", "New Mexico"),
                            ("NY", "New York"),
                            ("NC", "North Carolina"),
                            ("ND", "North Dakota"),
                            ("OH", "Ohio"),
                            ("OK", "Oklahoma"),
                            ("OR", "Oregon"),
                            ("PA", "Pennsylvania"),
                            ("RI", "Rhode Island"),
                            ("SC", "South Carolina"),
                            ("SD", "South Dakota"),
                            ("TN", "Tennessee"),
                            ("TX", "Texas"),
                            ("UT", "Utah"),
                            ("VT", "Vermont"),
                            ("VA", "Virginia"),
                            ("WA", "Washington"),
                            ("WV", "West Virginia"),
                            ("WI", "Wisconsin"),
                            ("WY", "Wyoming"),
                            ("DC", "District of Columbia"),
                            ("MH", "Marshall Islands"),
                        ],
                        max_length=2,
                    ),
                ),
                ("store_name", models.CharField(blank=True, max_length=100, null=True)),
                ("store_city", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "store_address",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("store_zip", models.IntegerField(blank=True, null=True)),
                ("store_directions", models.TextField(blank=True, null=True)),
                ("store_spanish_directions", models.TextField(blank=True, null=True)),
                (
                    "store_email",
                    models.EmailField(blank=True, max_length=255, null=True),
                ),
                (
                    "store_map_url",
                    models.URLField(blank=True, max_length=500, null=True),
                ),
                ("store_phone", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "store_keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=25), size=None
                    ),
                ),
                ("store_lat", models.CharField(blank=True, max_length=45, null=True)),
                ("store_long", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "store_description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "store_title",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "work_hours",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        default=product.models.django.DEFAULT_WORK_HOURS
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="ProductList",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "content",
                    wagtail.core.fields.StreamField(
                        [
                            ("product_list", ib.ProductList()),
                            (
                                "social_icons_banner",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.core.blocks.CharBlock(
                                                default="Join The TrailersPlus Community",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.core.blocks.CharBlock(
                                                default="Stay Up to Date With the Latest and Greatest",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "background_image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_mobile",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_alt",
                                            wagtail.core.blocks.CharBlock(
                                                max_length=255, required=False
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("partners", streams.blocks.PartnersBlock()),
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    "content_en",
                    wagtail.core.fields.StreamField(
                        [
                            ("product_list", ib.ProductList()),
                            (
                                "social_icons_banner",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.core.blocks.CharBlock(
                                                default="Join The TrailersPlus Community",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.core.blocks.CharBlock(
                                                default="Stay Up to Date With the Latest and Greatest",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "background_image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_mobile",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_alt",
                                            wagtail.core.blocks.CharBlock(
                                                max_length=255, required=False
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("partners", streams.blocks.PartnersBlock()),
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    "content_es",
                    wagtail.core.fields.StreamField(
                        [
                            ("product_list", ib.ProductList()),
                            (
                                "social_icons_banner",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.core.blocks.CharBlock(
                                                default="Join The TrailersPlus Community",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.core.blocks.CharBlock(
                                                default="Stay Up to Date With the Latest and Greatest",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "background_image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_mobile",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "background_image_alt",
                                            wagtail.core.blocks.CharBlock(
                                                max_length=255, required=False
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("partners", streams.blocks.PartnersBlock()),
                        ],
                        blank=True,
                        null=True,
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="Trailer",
            fields=[
                (
                    "vin",
                    models.CharField(
                        max_length=21,
                        primary_key=True,
                        serialize=False,
                        verbose_name="VIN number",
                    ),
                ),
                ("order_number", models.IntegerField(blank=True, null=True)),
                ("status", models.IntegerField(blank=True, null=True)),
                (
                    "sale_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("cash_price", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "calculated_cash_price",
                    models.CharField(blank=True, max_length=45, null=True),
                ),
                (
                    "msrp",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("width", models.CharField(blank=True, max_length=5, null=True)),
                ("length", models.CharField(blank=True, max_length=5, null=True)),
                ("gvwr", models.IntegerField(blank=True, null=True)),
                ("gawr", models.IntegerField(blank=True, null=True)),
                ("empty_weight", models.IntegerField(blank=True, null=True)),
                ("overall_height", models.IntegerField(blank=True, null=True)),
                ("overall_length", models.IntegerField(blank=True, null=True)),
                ("overall_width", models.IntegerField(blank=True, null=True)),
                ("interior_height", models.IntegerField(blank=True, null=True)),
                ("interior_length", models.IntegerField(blank=True, null=True)),
                ("interior_width", models.IntegerField(blank=True, null=True)),
                ("rear_door_height", models.IntegerField(blank=True, null=True)),
                ("rear_door_width", models.IntegerField(blank=True, null=True)),
                ("platform_height", models.IntegerField(blank=True, null=True)),
                ("hitch_height", models.IntegerField(blank=True, null=True)),
                ("frame_centers", models.IntegerField(blank=True, null=True)),
                ("roof_centers", models.IntegerField(blank=True, null=True)),
                ("wall_centers", models.IntegerField(blank=True, null=True)),
                ("axles", models.IntegerField(blank=True, null=True)),
                ("stone_guard", models.IntegerField(blank=True, null=True)),
                ("door_type", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "coupler_size",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("sale_date", models.DateField(blank=True, null=True)),
                ("delivery_date", models.DateField(blank=True, null=True)),
                ("year", models.CharField(blank=True, max_length=45, null=True)),
                (
                    "pictures",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=django.contrib.postgres.fields.jsonb.JSONField(),
                        null=True,
                        size=None,
                        verbose_name="Pictures list",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="product.Category",
                        verbose_name="Trailer's type",
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="product.Location",
                        verbose_name="Trailer's location",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="TrailerTranslation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("EN", "English"), ("ES", "Spanish")],
                        default="EN",
                        max_length=2,
                    ),
                ),
                (
                    "actual_color",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("color", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "axle_warranty",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "roof_warranty",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("warranty", models.CharField(blank=True, max_length=255, null=True)),
                ("tires", models.CharField(blank=True, max_length=255, null=True)),
                ("wheels", models.CharField(blank=True, max_length=255, null=True)),
                ("doors", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "stabilizer_jacks",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("side_door", models.CharField(blank=True, max_length=255, null=True)),
                ("rear_door", models.CharField(blank=True, max_length=255, null=True)),
                ("side_walls", models.CharField(blank=True, max_length=255, null=True)),
                ("suspension", models.CharField(blank=True, max_length=255, null=True)),
                ("frame", models.CharField(blank=True, max_length=255, null=True)),
                ("brakes", models.CharField(blank=True, max_length=255, null=True)),
                ("floor", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "clearance_lights",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "tail_lights",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "protected_undercarriage",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("long_description", models.TextField(blank=True, null=True)),
                (
                    "short_description",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("package", models.CharField(blank=True, max_length=255, null=True)),
                ("tag", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "trailer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="product.Trailer",
                        verbose_name="Related trailer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Trailer's translation",
                "verbose_name_plural": "Trailers' translations",
            },
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("web_category", "base_type"), name="unique_category"
            ),
        ),
    ]
